; vim: filetype=clojure

; This is a Riemann config file. It's a Clojure program that describes how
; to process Riemann events. 

; I'm going to take you on a tour of Riemann monitoring.
; When we're done, you will be able to write your own configs
;
; If you aren't familiar with Riemann or its events, see
;
; https://github.com/aphyr/riemann
;
; First, let's set up a log file. If you need to debug your
; configuration, you can always call (debug <anything>).
; is included.

(logging/init :file "riemann.log")

; The line above is a call to a function in Riemann called logging/init. 
; The function is called with two arguments a keyword, ':file' and a string
; "riemann.log"

; Riemann Servers accept events from the network.
; Start a TCP and UDP server by running the following two functions.

(tcp-server)
(udp-server)

; By default Riemann listens on port 5555 and every interface. You can change
; these by providing arguments to the server functions.

; (tcp-server :host "12.34.56.78" :port 5555)

;; Riemann Events
; Riemann Events are comprised of a host, service, a state, and a value. For example, a Riemann event could be something like, ('ramrs1.pit.twosigma.com','mesos/master/leader', 1), indicating that the server ramrs1.pit thinks it is the mesos leader. Events typically measure things, for example ('ramkv1.pit.twosigma.com', riak/put99', 8484) means the server thinks it's 99% latency is 8484 milliseconds.

;; The Riemann index.
; The index stores a moving windowed state for all Events. Riemann clients
; can search the index for various states with a basic query language.
; The Riemann Dash is an example of this.
; Riemann can expire events which have exceeded their TTL.
; Presently the only implementation of the index protocol is backed by an
; in memory nonblockinghashmap, but Aphyr has mentioned plans to build an HSQLDB
; backend. (intern project? riak? cassandra?)


; A little Clojure
; You'll need to know a little Clojure to work with riemann.config
; The first language primitive we'll hit is 'let'
; (let [name value name2 value2 ...] body) means "inside body, let these names
; refer to these values."
; It's basically the same effect as setting variables in a procedural language.
; def myFunction():
;     "print DP"
;     name = "DP"
;     print name
; (fn [x] (let [name "DP"] (prn name)))
; http://kartar.net/2015/04/just-enough-clojure-for-riemann/

(let [my-index (index)

  ; Let's define a stream that feeds events into the index. We'll
  ; call it index for short

  index (update-index my-index)]

  ; Now we need to *do* something with the events that flow in. The Riemann
  ; engine applies each incoming event to a series of streams. 'streams' is a 
  ; function that takes a variable number of arguments, each consisting of a
  ; a function that accepts a map of events
  (streams

    ;; hello riemann
    ; the 'prn' function prints its input to the console.
    ; Let's print every event that comes in:
    prn

    ;; that's it. start the server with the following command
    ; riemann riemann-1.config
    ; once Riemann starts up, you'll see events printed to stdout. 
    ; these are events generated by Riemann itself for monitoring.
))

