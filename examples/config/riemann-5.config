; vim: filetype=clojure

(logging/init :file "riemann.log")
(tcp-server)
(udp-server)


(let [my-index (index)
      index (update-index my-index)]
  (streams
    (default :ttl 30 
      ; index all events immediately
      index
      ;debug 
      prn

      (where (service "/count/me")
             ; Percentiles will emit events like
             ; {:service "/count/me 0.5" :metric 0.12}
             ; We'll add them to the index, so they can show up
             ; on our dashboard.
       
             (percentiles 5 [0.5 0.95 0.99] 
                          (fn [event] (info "[percentiles]" event))) 
             
             ; The rate stream takes the sum of every event's metric over interval seconds
             ; and divide by the interval size. Emits one event every interval seconds.
             ; Starts as soon as an event is received, stops when the most recent event expires
             ; Uses the most recently received event with a metric as a template.

             ; This stream will produce a new stream with the 5 second moving sum of the
             ; /count/me metric
             (rate 5)

             ; This isn't really what we want. (rate 5) will produce a new
             ; stream that is the sum of the value of metric. We actually want
             ; to count the number of events received over the interval.
             ; to do this, we first use the 'with' stream to set the metric
             ; value to 1, then sum over the value.
             (with :metric 1 (rate 5
                          (fn [event] (info "[counting]" event)))))))) 


