; vim: filetype=clojure

; This is a Riemann config file. It's a Clojure program that describes how
; to process Riemann events. 

; I'm going to take you on a tour of Riemann monitoring.
; When we're done, you will be able to write your own configs
;
; If you aren't familiar with Riemann or its events, see
;
; https://github.com/aphyr/riemann
;
; First, let's set up a log file. If you need to debug your
; configuration, you can always call (debug <anything>).
; is included.

(logging/init :file "riemann.log")

; The line above is a call to a function in Riemann called logging/init. 
; The function is called with two arguments a keyword, ':file' and a string
; "riemann.log"

; Riemann Servers accept events from the network.
; Start a TCP and UDP server by running the following two functions.

(tcp-server)
(udp-server)

; By default Riemann listens on port 5555 and every interface. You can change
; these by providing arguments to the server functions.

; (tcp-server :host "12.34.56.78" :port 5555)

;; Riemann Events
; Riemann is designed to operate on flows of events sent over protocol buffers.
; An event is basically a map of the following fields (copied from riemann documentation):
;     - host  A hostname, e.g. "api1", "foo.com"
;     - service e.g. "API port 8000 reqs/sec"
;     - state Any string less than 255 bytes, e.g. "ok", "warning", "critical"
;     - time  The time of the event, in unix epoch seconds
;     - description Freeform text
;     - tags  Freeform list of strings, e.g. ["rate", "fooproduct", "transient"]
;     - metric  A number associated with this event, e.g. the number of reqs/sec.
;     - ttl A floating-point time, in seconds, that this event is considered valid for. Expired states may be removed from the index.

;; The Riemann index.
; The index stores a moving windowed state for all Events. Riemann clients
; can search the index for various states with a basic query language.
; The Riemann Dash is an example of this.
; Riemann can expire events which have exceeded their TTL.
; Presently the only implementation of the index protocol is backed by an
; in memory nonblockinghashmap, but Aphyr has mentioned plans to build an HSQLDB
; backend. (intern project? riak? cassandra?)

; A little Clojure
; You'll need to know a little Clojure to work with riemann.config
; The first language primitive we'll hit is 'let'
; (let [name value name2 value2 ...] body) means "inside body, let these names
; refer to these values."
; It's basically the same effect as setting variables in a procedural language.
; def myFunction():
;     "print DP"
;     name = "DP"
;     print name
; (fn [x] (let [name "DP"] (prn name)))
; http://kartar.net/2015/04/just-enough-clojure-for-riemann/

(let [my-index (index)
      index (update-index my-index)]

  ; Now we need to *do* something with the events that flow in. The Riemann
  ; engine applies each incoming event to a series of streams. 'streams' is a 
  ; function that takes a variable number of arguments, each consisting of a
  ; a function that accepts a map of events
  (streams

    ;; hello riemann
    ; the 'prn' function prints its input to the console.
    ; Let's print every event that comes in:
    ; to disable a stream, just comment it out by prefixing a ';'
    ;prn

    ;; Next, lets build a stream that only responds to "error" events
    ;; 'where' is a stream function that passes on events where expr is true
    ;; all of the streams are documented nicely here:
    ;; http://riemann.io/api/riemann.streams.html
    (where (state "error")
           ; The where stream ignores any event that doesn't match. Events that
           ; do match get passed on to its children.
           ; Let's log those error events to the log:
        (fn [event] (info "[ERROR ERROR ERROR]" event))) 

    ; Where is powerful. You can match using equality:
    (where (host "mymacbook.palaitis.com")
        (fn [event] (info "[MATCHED MYMACBOOK]" event)))

    ; Boolean operators
    (where (or (tagged "dz0") (state "error"))
        (fn [event] (info "[GO BOOLEAN]" event)))

    ; writing streams inline can get verbose. since it's clojure, 
    ; we can just use functions.
    (defn fail? [event] (and
                          (= "error" (:state event))
                          (> (:metric event) 10000.0)))
    (where (fail? event)
        (fn [event] (info "[GO FAIL]" event)))
))
         
