; vim: filetype=clojure

(logging/init {:file "riemann.log"})
(tcp-server)
(udp-server)

(let [my-index (index)
      index (update-index my-index)]
  (streams
    ;; In the first section, we got Riemann up and running
    ; and examined some events. 
    ;; Next, lets build a stream that only responds to "error" events
    ;; 'where' is a stream function that passes on events where expr is true
    ;; all of the streams are documented nicely here:
    ;; http://riemann.io/api/riemann.streams.html
    (where (state "error")
           ; The where stream ignores any event that doesn't match. Events that
           ; do match get passed on to its children.
           ; Let's log those error events to the log:
        (fn [event] (info "[ERROR ERROR ERROR]" event))) 

    ; Where is powerful. You can match using equality:
    (where (host "mymacbook.palaitis.com")
        (fn [event] (info "[MATCHED MYMACBOOK]" event)))

    ; Boolean operators
    (where (or (tagged "dz0") (state "error"))
        (fn [event] (info "[GO BOOLEAN]" event)))

    ; writing streams inline can get verbose. since it's clojure, 
    ; we can just use functions.
    (defn fail? [event] (and
                          (= "error" (:state event))
                          (> (:metric event) 10000.0)))
    (where (fail? event)
        (fn [event] (info "[GO FAIL]" event)))
))
         
