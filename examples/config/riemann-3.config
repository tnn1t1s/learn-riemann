; vim: filetype=clojure

(logging/init :file "riemann.log")
(tcp-server)
(udp-server)

; a stream takes an event and any number of child streams
; you can modify and event and pass through to any children
; using the call-rescue stream

; in this example, we add a key value to the event before passing through
(defn change-event [& children]
  (fn [event]
    (let [transformed-event (assoc event :hello :world)]
      (call-rescue transformed-event children))))

; call-rescue can be very powerful, for example
(defn multiply-by-100 [& children]
  (fn [event]
    (let [new-event (assoc event :metric (* 100.0 (:metric event)))]
      (call-rescue new-event children))))



(let [my-index (index)
      index (update-index my-index)]

  ; Now, we are going to start combining streams, working towards a full featured
  ; example of dynamic monitoring. Until now, we've only used a single stream, 'where'
  ; which filters events based on rules provided. Now, we need to *do* something with
  ; the events that flow in. 
  (streams
    ; every parameter of streams is a stream

    (where (state "error")
           (change-event
               (fn [event] (info "[CHANGLING]" event))))

    ; create a new service based on the events in another
    ; this should look familiar
    (where (service "/mesoderm/dashboard/memory/ratio")
           (multiply-by-100
               (fn [event]
                 (index (assoc event :service "/mesoderm/dashboard/memory/percent")))))
))

