; vim: filetype=clojure

(logging/init :file "riemann.log")
(tcp-server)
(udp-server)

; We have a few streams in our toolbox: where, call-rescue, info and index.
; Now, we'll add a new stream that will let us summarize data in a moving window

(let [my-index (index)
      index (update-index my-index)]
  (streams
    (default :ttl 5
      ; index all events immediately
      index

      ;; Expired Events
      ; Every event has a time to live (ttl). The time to live should be
      ; set to ~ 2X the expected incoming event rate. So for example, if you
      ; have a process sending database metrics every 5 seconds, set the ttl to 10.
      ; If the ttl for an event expires, Riemann will expire the event.
      ; You PROBABLY want to know about this and take action on expired events.
      (expired
        (fn [event] (info "EXPIRED" event)))

      ;; Detecting state changes with changed-state stream and stable.
      ; Like most monitoring systems we also have to be conscious of the potential
      ; for state spikes and flapping.

      ; Riemann provides a useful stream to help us here called stable. Stable
      ; allows us to specify a time period and event field, like the state
      ; (or usefully the metric for certain types of monitoring),
      ; and it monitors for spikey or flapping behavior. Letâ€™s add stable to our example.
      (changed-state {:init "ok"}
                     (stable 5 :state
                             (fn [event] (info "CHANGE IN STATE DETECTED" event)))))))
