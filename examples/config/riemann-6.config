; vim: filetype=clojure

(def email (mailer))
(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index
    
      ; debug mode
      ;(where (service "dz0")
      ;      prn)

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))

      ; With a few streams in our toolbox, we're ready to examine
      ; some more complicated Riemann processing logic. The anotated
      ; example below checks if the minimum value of the mean of a 3 second
      ; moving average is less than 1 for at least 1/3 consecutive cycles. 

      ; Before we read through an example, I want to introduce two
      ; concepts: 'folds' and 'windows'

      ;; Folds
      ; The idea of folding a sequence of events comes from functional 
      ; programming languages. You can imagine you are stepping through a 
      ; sequence of events, folding one on top of the other where the 
      ; folding action can be any mathematical operation. 
      ; For example, folds/sum will simply sum the value of metric 
      ; in the sequence. folds/mean will calculate the mean, etc.
      ; In Ruby, 
      ; In Python,
      ; In Scala,
      ;; Windows
      ; Windows are a critical concept in stream processing. There are many
      ; types of windows, but they all share the same property; they collect
      ; events over a time period. In Riemann, all windows span historical data,
      ; that is, data we've already seen. However, in financial services, this 
      ; isn't always the case. It's perfectly reasonable to examine a future
      ; window, or a window that has both the past and the future. 
      ; There are two classes of Riemann windows: fixed time and event. 

      ;; Fixed time windows look back over fixed time period. For example, a 
      ; fixed time window of 3 seconds would include all events received in
      ; the last 3 seconds. That could be as few as zero events or as many as
      ; well, way too many. Having too many events in a fixed window can
      ; be problematic, so we'll deal with that in future examples.

      ;; Event based windows look back over a fixed number of events. 
      ; For example, an event window of size 100 will collect the last
      ; 100 events on a stream. 

      ;; Now, with an understanding of folds and events, we are ready to 
      ; start understanding the example below

      (where (not (expired? event))
      ;; over time windows of 3 seconds...
        (fixed-time-window 3
        ;; calculate the average value , emit an average (summary) event
          (combine folds/mean
	  ;; if there are no events in the window, we can get nil events.
          ; we want to filter those out.
	    (where (not (nil? event))
	       #(info "DJP: average event" %)
	       ;; collect the mean over the last 3 fixed-time-windows
	       (moving-event-window 3
	         ;;find the summary event with the minimum average metric
	         (combine folds/minimum
	           ;; see if it breached the threshold
		   (where (> metric 1.0)
		     #(info "[DJP: IT IS HAPPENING AGAIN]" %)
		     ;; take some action e.g. pagerduty, etc.
		     prn)))))))))


