(require '[riemann.elastic :as elastic])
; vim: filetype=clojure

; In this exercise, we'll start pushing data form Riemann into ElasticSearch
; This will give you historical timeseries data for the streams you are most
; interested in indexing and archiving.
; We'll use the Riemann Elastic Search plugin from tnn1t1s 
; https://github.com/tnn1t1s/riemann-elastic
(def elastic-url "http://localhost:9200")
(def elastic-conn (when (seq elastic-url) (elastic/es-connect elastic-url)))

; A generic indexing function with default ttl
(def default-index (default :ttl 300 (index)))

; for convenience, define a 'sink' that writes to elastic and the index
; if we have an elastic connection, send to default-index and elastic search
; through an async-queue.
; if there is no elastic connection, just send to default-index
(def elastic-sink
  (let [sinks (if elastic-conn
                [default-index (async-queue! :elastic-search
                                       {:queue-size 10000}
                                       (batch 200 10 (elastic/es-index "riemann-elastic")))]
                [default-index])]
    (fn [e]
      (call-rescue e sinks)))) 


; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(logging/init {:file "riemann.log"})
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  (streams
    ; here, we used project to create a new service, mem percent,
    ; by using the ratio of used mem to total mem
    (project [(service "mem used")
              (service "mem total")]
             (smap folds/quotient
                   (scale 100
                          (with :service "mem percent" elastic-sink))))))
