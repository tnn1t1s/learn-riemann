;(require '[riemann.elastic :as elastic])
; vim: filetype=clojure

(def email (mailer))
(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)


;Use coalesce to get snapshot of the most recent event from every host and service that passes through that coalesce stream. Coalesce helps answer questions like "what fraction of my API servers are running the most recent version", or "what's the median queue depth across all queues in a given broker?"


(let [index (index)]
  (streams
    ; here, we used project to create a new service, mem percent,
    ; by using the ratio of used mem to total mem
    (project [(service "mem used")
              (service "mem total")]
             (smap folds/quotient
                   (scale 100
                          (with :service "mem percent" index))))

    ; coalesce 
    ; in the example, we index all streams where service is equal to 'disk xyz', then
    ; we coalesce on service and output a new stream with the sum of metric across 
    ; all hosts and host equal to 'nil'
    (where (service "disk xyz")
           index
           (by :service
               (coalesce
                 (smap folds/sum
                       (with :host nil
                         index)))))

    (where (service "agent")
           index
           (by :service
               (coalesce
                 (smap folds/count
                       (with :host nil
                         index)))))
    ))
